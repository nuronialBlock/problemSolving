// hasta la victoria siempre
// Joy Bangla!

// State: AC

#include <bits/stdc++.h>

using namespace std;

#define pii pair<int , int >
#define pLL pair<LL,LL>
#define psi pair<string, int>
#define ff first
#define ss second

#define LL long long 
#define uLL unsigned long long

#define vi vector<int > 
#define vc vector<char > 
#define vpii vector <pii>
#define vpsi vector<psi>
#define vd vector <double>
#define vb vector <bool>
#define vs vector <string>
#define vLL vector <LL >
#define pb push_back
#define sz size()


#define mii map<int,int>
#define mdd map<double,double>
#define msi map<string,int>
#define mis map<int , string> 
#define mLL map<LL,LL>
#define mLi map<LL,int>
#define miL map<int,LL>
#define mci map<char,int>

#define PQ priority_queue
#define maxN 100005
#define maxX **
#define maxY ***
#define maxx *****
#define mod 100000000

#define SET(a,n) memset(a,n,sizeof(a))

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()

// loops 
#define loop(i,a,n) for(int i = a ; i < n ; i++ )
#define rloop(i,a,n) for(int i = a ; i > n ; i-- )
#define fasterIO ios::sync_with_stdio(0)

////////////


class node{
public:
	int vtx , wgt;
	
	node(int a , int b){
		vtx = a; 
		wgt = b;
	} 
	
	bool operator < (const node& p) const{
		return p.wgt < wgt	 ;
	}
	
};



int tc , n , m , s , t , kase = 0;
vi graph[20009];
vi cost[20009];
int dist[20009];

int dijkstra(){
	
	SET(dist,63);
	dist[s] = 0;
	PQ <node> q;
	q.push(node(s,0));
	
	while(!q.empty()){
		node vrtx = q.top();q.pop();
		int now = vrtx.vtx;
		if(now == t){return dist[now];}
		int siz = graph[now].sz;
		loop(i,0,siz){
			int new_vtx = graph[now][i];
			int new_cost = cost[now][i];
			if(dist[now] + new_cost < dist[new_vtx]){
				dist[new_vtx] = dist[now] + new_cost;
				q.push(node(new_vtx,dist[new_vtx]));
			}
		}
	}
	return -1;
}



int main()
{

	fasterIO;
	
	cin >> tc;
	while(tc--){
		kase++;
		cin >> n >> m >> s >> t;
		int u , v, w ;
		loop(i,0,20001) {graph[i].clear() ; cost[i].clear();}
		loop(i,0,m){
			int u , v, w ;
			cin >> u >> v >> w;
			graph[u].pb(v);
			graph[v].pb(u);
			cost[u].pb(w);
			cost[v].pb(w);
		}
		
		cout << "Case #" << kase << ": ";
		
		int ret = dijkstra();
		if(ret == -1) cout << "unreachable\n"; 
		else cout << ret << "\n";
	} 
	
	return 0;
}

















